{"version":3,"file":"static/js/437.bc0c4f68.chunk.js","mappings":"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","sources":["../node_modules/clsx/dist/clsx.m.js","../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/validateParams.js","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","Components/Contact/ContactForm.jsx","Components/Contact/Contact.jsx"],"sourcesContent":["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse ? httpResponse.status : 0;\n        this.text = httpResponse ? httpResponse.responseText : 'Network Error';\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, publicKey) => {\n    const uID = publicKey || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.11.0');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","import React, { useRef } from 'react'\r\nimport emailjs from '@emailjs/browser'\r\nimport { toast } from 'react-toastify'\r\nimport './Contact.css'\r\n\r\nconst ContactForm = () => {\r\n    const form = useRef()\r\n\r\n    // Enter emailjs service id,template id and public key\r\n    const service_id = process.env.REACT_APP_SERVICEID\r\n    const template_id = process.env.REACT_APP_TEMPLATEID\r\n    const public_key = process.env.REACT_APP_PUBLICKEY\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n\r\n        try {\r\n            const response = await emailjs.sendForm(service_id, template_id, form.current, public_key)\r\n\r\n            console.log('SUCCESS!', response.status, response.text)\r\n            toast.success('Your response is submitted!', { position: toast.POSITION.TOP_CENTER })\r\n        } catch (error) {\r\n            console.error('FAILED...', error)\r\n            toast.error('Failed to submit the form. Please try again later.', { position: toast.POSITION.TOP_CENTER })\r\n        }\r\n\r\n        // Reset form fields\r\n        e.target.reset()\r\n    }\r\n\r\n    return (\r\n        <div className='form_container'>\r\n            <form className=\"form-contact\" onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"name\"\r\n                    name='name'\r\n                    required\r\n                    placeholder=\"Your Name\"\r\n                />\r\n\r\n                <input\r\n                    type=\"email\"\r\n                    id=\"email\"\r\n                    name='email'\r\n                    required\r\n                    placeholder=\"Your Email\"\r\n                />\r\n\r\n                <input\r\n                    type=\"number\"\r\n                    id=\"mobNumber\"\r\n                    name='mobNumber'\r\n                    placeholder=\"Your Mobile No\"\r\n                />\r\n\r\n                <textarea\r\n                    id=\"message\"\r\n                    name='message'\r\n                    rows=\"5\"\r\n                    required\r\n                    placeholder=\"Your Message\"\r\n                />\r\n\r\n                <div className=\"form-btn\">\r\n                    <button id=\"submit\" type=\"submit\">Send Message</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default ContactForm\r\n","import React from 'react'\r\nimport { ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport ContactForm from './ContactForm'\r\nimport linkedinIcon from '../../Assets/linkedin.png'\r\nimport emailIcon from '../../Assets/email.png'\r\nimport './Contact.css'\r\n\r\nconst Contact = () => {\r\n\r\n  return (\r\n    <section id=\"contact\">\r\n      {/* Display toast messages */}\r\n      <ToastContainer />\r\n      <p className=\"section-text-p1\">Get in Touch</p>\r\n      <h1 className=\"title\">Contact Me</h1>\r\n      <div className=\"contact-info-upper-container\">\r\n        <div className=\"contact-info-container\">\r\n          <img\r\n            src={emailIcon}\r\n            alt=\"Email icon\"\r\n            className=\"icon contact-icon email-icon\"\r\n          />\r\n          <p><a href=\"mailto:vimukthikulathilaka@gmail.com\">vimukthikulathilaka@gmail.com</a></p>\r\n        </div>\r\n        <div className=\"contact-info-container\">\r\n          <img\r\n            src={linkedinIcon}\r\n            alt=\"LinkedIn icon\"\r\n            className=\"icon contact-icon\"\r\n          />\r\n          <p><a href=\"https://www.linkedin.com/in/vimukthi-kulathilaka-76bb39229\">vimukthi Kulathilaka</a></p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* contact form */}\r\n      <ContactForm />\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Contact"],"names":["r","e","t","f","n","Array","isArray","length","arguments","store","_origin","validateParams","publicKey","serviceID","templateID","EmailJSResponseStatus","constructor","httpResponse","this","status","text","responseText","sendPost","url","data","headers","undefined","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","_ref","target","responseStatus","_ref2","open","Object","keys","forEach","key","setRequestHeader","send","sendForm","form","uID","_userID","currentForm","document","querySelector","nodeName","findHTMLForm","formData","FormData","append","ContactForm","useRef","_jsx","className","children","_jsxs","onSubmit","async","preventDefault","response","emailjs","process","current","console","log","toast","success","position","POSITION","TOP_CENTER","error","reset","type","id","name","required","placeholder","rows","Contact","ToastContainer","src","emailIcon","alt","href","linkedinIcon"],"sourceRoot":""}